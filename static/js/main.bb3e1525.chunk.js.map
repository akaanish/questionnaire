{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initState","questions","score","isValid","App","useState","reset","setReset","isLoading","setIsLoading","initial","setInitial","valid","setValid","submit","setSubmit","data","key","length","fetchData","a","axios","get","response","payload","console","log","useEffect","Container","className","Row","Col","xs","Spinner","animation","Alert","variant","map","q","i","Card","text","focus","bg","Header","question","Body","options","item","Form","Check","type","label","value","name","id","checked","isChecked","onChange","e","qId","forEach","element","questionId","el","onValueChange","target","Button","onClick","preventDefault","validations","answer","handleSubmit","handelReset","width","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bb3e1525.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport './App.css';\nimport { Form, Row, Col, Spinner, Card, Alert } from 'react-bootstrap';\nimport { BarChart } from 'reaviz';\nimport axios from 'axios';\n\nconst initState = {\n  questions: [],\n  score: 0,\n  isValid: false\n};\n\nconst App = () => {\n\n  const [reset, setReset] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [initial, setInitial] = useState(initState);\n  const [valid, setValid] = useState(true);\n  const [submit, setSubmit] = useState(false);\n\n  const data = [\n    { key: 'Correct', data: initial.score },\n    { key: 'Incorrect', data: initial.questions.length - initial.score }\n  ];\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get('data.json');\n      setInitial({ ...initial, questions: response.data.payload })\n      setIsLoading(false);\n    } catch (error) {\n      console.log('error while fetchin api ====');\n    }\n  }\n\n  useEffect(() => {\n    fetchData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [reset])\n\n  const onValueChange = (qId, e) => {\n    const questions = [...initial.questions];\n    questions.forEach(element => {\n      if (element.questionId === qId) {\n        element.response = e.value;\n        element.options.forEach((el) => {\n          if (el.text === e.value) {\n            el.isChecked = e.checked\n            element.focus = false;\n            if (!e.checked) {\n              element.response = '';\n            }\n          } else {\n            el.isChecked = false\n          }\n        })\n      } else {\n        if (valid === true && submit === true) {\n          element.focus = '';\n        }\n      }\n    });\n    setInitial({ ...initial, questions })\n    setValid(true)\n    setSubmit(false)\n  }\n\n  const handelReset = (e) => {\n    e.preventDefault();\n    setReset(!reset)\n    setValid(true)\n    setSubmit(false)\n  }\n\n  const validations = (questions) => {\n    let isValid = true;\n    for (let i = 0; i < questions.length; i++) {\n      const q = questions[i];\n      if (q.response === '') {\n        isValid = false;\n        break;\n      }\n    }\n    return isValid;\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let { questions, score } = initial;\n    const isValid = validations(questions);\n    if (!isValid) {\n      setSubmit(false)\n      setValid(false)\n    } else {\n      score = 0;\n      questions.forEach(element => {\n        if (element.response !== '') {\n          if (element.response !== element.answer) {\n            element.focus = true;\n          }else{\n            score = score + 1;\n          }\n        }\n      });\n      setInitial({ ...initial, questions, score })\n      setSubmit(true)\n      setValid(true)\n    }\n  }\n\n  const renderQnAs = (q, i) => {\n    return (\n      <Card text={q.focus ? 'white' : 'dark'} className=\"mb-2\" key={i} bg={q.focus ? 'danger' : 'light'}>\n        <Card.Header>{`${i + 1}. ${q.question}`}</Card.Header>\n        <Card.Body>\n          {q.options.map((item, i) => {\n            return (\n              <Form.Check\n                type=\"checkbox\"\n                label={item.text}\n                value={item.text}\n                name=\"formHorizontalRadios\"\n                id={i}\n                key={i}\n                checked={item.isChecked}\n                onChange={(e) => onValueChange(q.questionId, e.target)}\n              />\n            )\n          })}\n        </Card.Body>\n      </Card>\n    )\n  }\n\n  return (\n    <Container className=\"p-3\">\n      <Row>\n        <Col xs={10}>\n          {isLoading && <Spinner animation=\"border\" />}\n          {submit === false && valid === false && <Alert key={'idx'} variant={'danger'}>\n            Please answer all questions\n          </Alert>}\n          {initial.questions.length > 0 && initial.questions.map(renderQnAs)}\n          <Row>\n            <Col>\n              <Button type=\"submit\" onClick={(e) => handleSubmit(e)}>Submit</Button>\n            </Col>\n            <Col>\n              <Button type=\"submit\" onClick={(e) => handelReset(e)}>Clear</Button>\n            </Col>\n          </Row>\n        </Col>\n        <Col>\n          {submit && <BarChart width={100} height={250} data={data} />}\n        </Col>\n      </Row>\n    </Container>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}